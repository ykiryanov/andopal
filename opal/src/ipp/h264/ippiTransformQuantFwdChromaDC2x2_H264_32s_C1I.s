        .text
        .align  4
        .globl  ippiTransformQuantFwdChromaDC2x2_H264_32s_C1I


ippiTransformQuantFwdChromaDC2x2_H264_32s_C1I:
        stmdb   sp!, {r1, r4 - r11, lr}
        ldr     lr, [sp, #0x28]
        ldr     r4, [sp, #0x2C]
        ldr     r12, [sp, #0x30]
        mov     r7, r0
        cmp     r7, #0
        mov     r6, r1
        mov     r5, r3
        beq     LLBV4
        cmp     r6, #0
        beq     LLBV4
        cmp     r5, #0
        beq     LLBV4
        cmp     r2, #0
        blt     LLBV2
        cmp     r2, #0x4B
        bgt     LLBV2
        cmp     r4, #0
        beq     LLBV0
        ldr     r8, [r7, #0xC]
        ldr     r9, [r7]
        ldr     r4, [r7, #4]
        ldr     r10, [r7, #8]
        add     r8, r4, r8
        add     r9, r9, r10
        add     r8, r9, r8
        str     r8, [r6]
        ldr     r9, [r7]
        ldr     r8, [r7, #0xC]
        ldr     r10, [r7, #8]
        ldr     r4, [r7, #4]
        add     r9, r9, r10
        add     r8, r4, r8
        sub     r9, r9, r8
        str     r9, [r6, #4]
        ldr     r8, [r7, #4]
        ldr     r9, [r7, #8]
        ldr     r4, [r7, #0xC]
        ldr     r10, [r7]
        sub     r8, r8, r4
        sub     r9, r10, r9
        add     r8, r9, r8
        str     r8, [r6, #8]
        ldr     r9, [r7, #8]
        ldr     r8, [r7, #4]
        ldr     r10, [r7]
        ldr     r4, [r7, #0xC]
        sub     r9, r10, r9
        sub     r8, r8, r4
        sub     r9, r9, r8
        str     r9, [r6, #0xC]
LLBV0:
        ldr     r4, [pc, #0x1DC]
        ldr     r8, [pc, #0x1DC]
        cmp     r12, #0
        ldrb    r4, [r2, +r4]
        mov     r9, #0
        ldrb    r2, [r2, +r8]
        str     r9, [r5]
        addne   r4, r4, #0xC
        beq     LLBV3
LLBV1:
        ldr     r9, [pc, #0x1C0]
        cmp     lr, #0
        mov     lr, #1
        mov     r8, lr, lsl r4
        movne   r9, r9, lsl #1
        smull   lr, r9, r8, r9
        ldr     lr, [r6]
        ldrsh   r10, [r12]
        sub     r11, r9, r8, asr #31
        cmp     lr, #0
        mvn     r9, #0
        strlt   r9, [sp]
        movge   r12, #1
        strge   r12, [sp]
        ldr     r12, [sp]
        mov     r8, r4, asr #31
        mov     r2, r4
        mul     lr, r12, lr
        mov     r3, r8
        smull   lr, r12, r10, lr
        adds    r0, r11, lr
        adc     r1, r12, r11, asr #31
        bl      __ashrdi3
        ldr     r12, [sp]
        cmp     r0, #0
        mov     lr, #0
        mul     r12, r12, r0
        mov     r0, #1
        movne   lr, r0
        str     r12, [r7]
        ldr     r12, [r5]
        add     r12, lr, r12
        str     r12, [r5]
        ldr     r12, [r6, #4]
        cmp     r12, #0
        strlt   r9, [sp]
        movge   lr, #1
        strge   lr, [sp]
        ldr     lr, [sp]
        mov     r2, r4
        mov     r3, r8
        mul     r12, lr, r12
        smull   lr, r12, r10, r12
        adds    r0, r11, lr
        adc     r1, r12, r11, asr #31
        bl      __ashrdi3
        ldr     r12, [sp]
        cmp     r0, #0
        mul     r12, r12, r0
        mov     lr, #0
        mov     r0, #1
        movne   lr, r0
        str     r12, [r7, #4]
        ldr     r12, [r5]
        add     r12, lr, r12
        str     r12, [r5]
        ldr     r12, [r6, #8]
        cmp     r12, #0
        strlt   r9, [sp]
        movge   lr, #1
        strge   lr, [sp]
        ldr     lr, [sp]
        mov     r2, r4
        mov     r3, r8
        mul     r12, lr, r12
        smull   lr, r12, r10, r12
        adds    r0, r11, lr
        adc     r1, r12, r11, asr #31
        bl      __ashrdi3
        ldr     r12, [sp]
        cmp     r0, #0
        mul     r12, r12, r0
        mov     lr, #0
        mov     r0, #1
        movne   lr, r0
        str     r12, [r7, #8]
        ldr     r12, [r5]
        add     r12, lr, r12
        str     r12, [r5]
        ldr     r6, [r6, #0xC]
        cmp     r6, #0
        movge   r9, #1
        mul     r1, r9, r6
        mov     r2, r4
        mov     r3, r8
        smull   r10, r1, r10, r1
        adds    r0, r11, r10
        adc     r1, r1, r11, asr #31
        bl      __ashrdi3
        mul     r9, r9, r0
        mov     r1, #0
        cmp     r0, #0
        mov     r2, #1
        str     r9, [r7, #0xC]
        movne   r1, r2
        ldr     r2, [r5]
        add     r1, r1, r2
        str     r1, [r5]
        ldr     r7, [r7]
        cmp     r7, #0
        rsbne   r1, r1, #0
        strne   r1, [r5]
        mov     r0, #0
        ldmia   sp!, {r1, r4 - r11, pc}
LLBV2:
        mvn     r0, #0xA
        ldmia   sp!, {r1, r4 - r11, pc}
LLBV3:
        ldr     r12, [pc, #0x1C]
        add     r4, r4, #0x10
        add     r12, r12, r2, lsl #5
        b       LLBV1
LLBV4:
        mvn     r0, #7
        ldmia   sp!, {r1, r4 - r11, pc}
        .long   LLBV_h264_qp6
        .long   LLBV_h264_qp_rem
        .long   0x2aaaaaab
        .long   LLBV_FwdQuantTable_16s


        .data
        .align  4


LLBV_h264_qp6:
        .byte   0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02
        .byte   0x02,0x02,0x03,0x03,0x03,0x03,0x03,0x03,0x04,0x04,0x04,0x04,0x04,0x04,0x05,0x05
        .byte   0x05,0x05,0x05,0x05,0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x07,0x07,0x07,0x07,0x07
        .byte   0x08,0x08,0x08,0x08,0x08,0x08,0x09,0x09,0x09,0x09,0x09,0x09,0x0A,0x0A,0x0A,0x0A
        .byte   0x0A,0x0A,0x0B,0x0B,0x0B,0x0B,0x0B,0x0B,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0D,0x0D
        .byte   0x0D,0x0D,0x0D,0x0D,0x0E,0x0E,0x0E,0x0E,0x0E,0x0E,0x00,0x00
LLBV_h264_qp_rem:
        .byte   0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03
        .byte   0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01
        .byte   0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05
        .byte   0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03
        .byte   0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x01
        .byte   0x02,0x03,0x04,0x05,0x00,0x01,0x02,0x03,0x04,0x05,0x00,0x00
LLBV_FwdQuantTable_16s:
        .byte   0x33,0x33,0x82,0x1F,0x33,0x33,0x82,0x1F,0x82,0x1F,0x7B,0x14,0x82,0x1F,0x7B,0x14
        .byte   0x33,0x33,0x82,0x1F,0x33,0x33,0x82,0x1F,0x82,0x1F,0x7B,0x14,0x82,0x1F,0x7B,0x14
        .byte   0x8C,0x2E,0x42,0x1D,0x8C,0x2E,0x42,0x1D,0x42,0x1D,0x34,0x12,0x42,0x1D,0x34,0x12
        .byte   0x8C,0x2E,0x42,0x1D,0x8C,0x2E,0x42,0x1D,0x42,0x1D,0x34,0x12,0x42,0x1D,0x34,0x12
        .byte   0x62,0x27,0x9A,0x19,0x62,0x27,0x9A,0x19,0x9A,0x19,0x62,0x10,0x9A,0x19,0x62,0x10
        .byte   0x62,0x27,0x9A,0x19,0x62,0x27,0x9A,0x19,0x9A,0x19,0x62,0x10,0x9A,0x19,0x62,0x10
        .byte   0x92,0x24,0xC1,0x16,0x92,0x24,0xC1,0x16,0xC1,0x16,0x3F,0x0E,0xC1,0x16,0x3F,0x0E
        .byte   0x92,0x24,0xC1,0x16,0x92,0x24,0xC1,0x16,0xC1,0x16,0x3F,0x0E,0xC1,0x16,0x3F,0x0E
        .byte   0x00,0x20,0x7B,0x14,0x00,0x20,0x7B,0x14,0x7B,0x14,0x1B,0x0D,0x7B,0x14,0x1B,0x0D
        .byte   0x00,0x20,0x7B,0x14,0x00,0x20,0x7B,0x14,0x7B,0x14,0x1B,0x0D,0x7B,0x14,0x1B,0x0D
        .byte   0x72,0x1C,0xCF,0x11,0x72,0x1C,0xCF,0x11,0xCF,0x11,0x4D,0x0B,0xCF,0x11,0x4D,0x0B
        .byte   0x72,0x1C,0xCF,0x11,0x72,0x1C,0xCF,0x11,0xCF,0x11,0x4D,0x0B,0xCF,0x11,0x4D,0x0B


