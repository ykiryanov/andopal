#include "umc_defs.h"

#include "umc_h264_dec.h"
#include "umc_h264_bitstream.h"
#include "umc_h264_bitstream_inlines.h"
#include "umc_h264_dec_internal_cabac.h"
#include "vm_types.h"
#include <ippi.h>
#include "h264_util.h"
#include "CodecUtil.h"

#ifndef WIN32
#include "TargetConditionals.h"
#endif




const Ipp16s g_QuantTable[52*16] = {
0x000a,0x000d,0x000a,0x000d,0x000d,0x0010,0x000d,0x0010,0x000a,0x000d,0x000a,0x000d,0x000d,0x0010,0x000d,0x0010,
0x000b,0x000e,0x000b,0x000e,0x000e,0x0012,0x000e,0x0012,0x000b,0x000e,0x000b,0x000e,0x000e,0x0012,0x000e,0x0012,
0x000d,0x0010,0x000d,0x0010,0x0010,0x0014,0x0010,0x0014,0x000d,0x0010,0x000d,0x0010,0x0010,0x0014,0x0010,0x0014,
0x000e,0x0012,0x000e,0x0012,0x0012,0x0017,0x0012,0x0017,0x000e,0x0012,0x000e,0x0012,0x0012,0x0017,0x0012,0x0017,
0x0010,0x0014,0x0010,0x0014,0x0014,0x0019,0x0014,0x0019,0x0010,0x0014,0x0010,0x0014,0x0014,0x0019,0x0014,0x0019,
0x0012,0x0017,0x0012,0x0017,0x0017,0x001d,0x0017,0x001d,0x0012,0x0017,0x0012,0x0017,0x0017,0x001d,0x0017,0x001d,
0x0014,0x001a,0x0014,0x001a,0x001a,0x0020,0x001a,0x0020,0x0014,0x001a,0x0014,0x001a,0x001a,0x0020,0x001a,0x0020,
0x0016,0x001c,0x0016,0x001c,0x001c,0x0024,0x001c,0x0024,0x0016,0x001c,0x0016,0x001c,0x001c,0x0024,0x001c,0x0024,
0x001a,0x0020,0x001a,0x0020,0x0020,0x0028,0x0020,0x0028,0x001a,0x0020,0x001a,0x0020,0x0020,0x0028,0x0020,0x0028,
0x001c,0x0024,0x001c,0x0024,0x0024,0x002e,0x0024,0x002e,0x001c,0x0024,0x001c,0x0024,0x0024,0x002e,0x0024,0x002e,
0x0020,0x0028,0x0020,0x0028,0x0028,0x0032,0x0028,0x0032,0x0020,0x0028,0x0020,0x0028,0x0028,0x0032,0x0028,0x0032,
0x0024,0x002e,0x0024,0x002e,0x002e,0x003a,0x002e,0x003a,0x0024,0x002e,0x0024,0x002e,0x002e,0x003a,0x002e,0x003a,
0x0028,0x0034,0x0028,0x0034,0x0034,0x0040,0x0034,0x0040,0x0028,0x0034,0x0028,0x0034,0x0034,0x0040,0x0034,0x0040,
0x002c,0x0038,0x002c,0x0038,0x0038,0x0048,0x0038,0x0048,0x002c,0x0038,0x002c,0x0038,0x0038,0x0048,0x0038,0x0048,
0x0034,0x0040,0x0034,0x0040,0x0040,0x0050,0x0040,0x0050,0x0034,0x0040,0x0034,0x0040,0x0040,0x0050,0x0040,0x0050,
0x0038,0x0048,0x0038,0x0048,0x0048,0x005c,0x0048,0x005c,0x0038,0x0048,0x0038,0x0048,0x0048,0x005c,0x0048,0x005c,
0x0040,0x0050,0x0040,0x0050,0x0050,0x0064,0x0050,0x0064,0x0040,0x0050,0x0040,0x0050,0x0050,0x0064,0x0050,0x0064,
0x0048,0x005c,0x0048,0x005c,0x005c,0x0074,0x005c,0x0074,0x0048,0x005c,0x0048,0x005c,0x005c,0x0074,0x005c,0x0074,
0x0050,0x0068,0x0050,0x0068,0x0068,0x0080,0x0068,0x0080,0x0050,0x0068,0x0050,0x0068,0x0068,0x0080,0x0068,0x0080,
0x0058,0x0070,0x0058,0x0070,0x0070,0x0090,0x0070,0x0090,0x0058,0x0070,0x0058,0x0070,0x0070,0x0090,0x0070,0x0090,
0x0068,0x0080,0x0068,0x0080,0x0080,0x00a0,0x0080,0x00a0,0x0068,0x0080,0x0068,0x0080,0x0080,0x00a0,0x0080,0x00a0,
0x0070,0x0090,0x0070,0x0090,0x0090,0x00b8,0x0090,0x00b8,0x0070,0x0090,0x0070,0x0090,0x0090,0x00b8,0x0090,0x00b8,
0x0080,0x00a0,0x0080,0x00a0,0x00a0,0x00c8,0x00a0,0x00c8,0x0080,0x00a0,0x0080,0x00a0,0x00a0,0x00c8,0x00a0,0x00c8,
0x0090,0x00b8,0x0090,0x00b8,0x00b8,0x00e8,0x00b8,0x00e8,0x0090,0x00b8,0x0090,0x00b8,0x00b8,0x00e8,0x00b8,0x00e8,
0x00a0,0x00d0,0x00a0,0x00d0,0x00d0,0x0100,0x00d0,0x0100,0x00a0,0x00d0,0x00a0,0x00d0,0x00d0,0x0100,0x00d0,0x0100,
0x00b0,0x00e0,0x00b0,0x00e0,0x00e0,0x0120,0x00e0,0x0120,0x00b0,0x00e0,0x00b0,0x00e0,0x00e0,0x0120,0x00e0,0x0120,
0x00d0,0x0100,0x00d0,0x0100,0x0100,0x0140,0x0100,0x0140,0x00d0,0x0100,0x00d0,0x0100,0x0100,0x0140,0x0100,0x0140,
0x00e0,0x0120,0x00e0,0x0120,0x0120,0x0170,0x0120,0x0170,0x00e0,0x0120,0x00e0,0x0120,0x0120,0x0170,0x0120,0x0170,
0x0100,0x0140,0x0100,0x0140,0x0140,0x0190,0x0140,0x0190,0x0100,0x0140,0x0100,0x0140,0x0140,0x0190,0x0140,0x0190,
0x0120,0x0170,0x0120,0x0170,0x0170,0x01d0,0x0170,0x01d0,0x0120,0x0170,0x0120,0x0170,0x0170,0x01d0,0x0170,0x01d0,
0x0140,0x01a0,0x0140,0x01a0,0x01a0,0x0200,0x01a0,0x0200,0x0140,0x01a0,0x0140,0x01a0,0x01a0,0x0200,0x01a0,0x0200,
0x0160,0x01c0,0x0160,0x01c0,0x01c0,0x0240,0x01c0,0x0240,0x0160,0x01c0,0x0160,0x01c0,0x01c0,0x0240,0x01c0,0x0240,
0x01a0,0x0200,0x01a0,0x0200,0x0200,0x0280,0x0200,0x0280,0x01a0,0x0200,0x01a0,0x0200,0x0200,0x0280,0x0200,0x0280,
0x01c0,0x0240,0x01c0,0x0240,0x0240,0x02e0,0x0240,0x02e0,0x01c0,0x0240,0x01c0,0x0240,0x0240,0x02e0,0x0240,0x02e0,
0x0200,0x0280,0x0200,0x0280,0x0280,0x0320,0x0280,0x0320,0x0200,0x0280,0x0200,0x0280,0x0280,0x0320,0x0280,0x0320,
0x0240,0x02e0,0x0240,0x02e0,0x02e0,0x03a0,0x02e0,0x03a0,0x0240,0x02e0,0x0240,0x02e0,0x02e0,0x03a0,0x02e0,0x03a0,
0x0280,0x0340,0x0280,0x0340,0x0340,0x0400,0x0340,0x0400,0x0280,0x0340,0x0280,0x0340,0x0340,0x0400,0x0340,0x0400,
0x02c0,0x0380,0x02c0,0x0380,0x0380,0x0480,0x0380,0x0480,0x02c0,0x0380,0x02c0,0x0380,0x0380,0x0480,0x0380,0x0480,
0x0340,0x0400,0x0340,0x0400,0x0400,0x0500,0x0400,0x0500,0x0340,0x0400,0x0340,0x0400,0x0400,0x0500,0x0400,0x0500,
0x0380,0x0480,0x0380,0x0480,0x0480,0x05c0,0x0480,0x05c0,0x0380,0x0480,0x0380,0x0480,0x0480,0x05c0,0x0480,0x05c0,
0x0400,0x0500,0x0400,0x0500,0x0500,0x0640,0x0500,0x0640,0x0400,0x0500,0x0400,0x0500,0x0500,0x0640,0x0500,0x0640,
0x0480,0x05c0,0x0480,0x05c0,0x05c0,0x0740,0x05c0,0x0740,0x0480,0x05c0,0x0480,0x05c0,0x05c0,0x0740,0x05c0,0x0740,
0x0500,0x0680,0x0500,0x0680,0x0680,0x0800,0x0680,0x0800,0x0500,0x0680,0x0500,0x0680,0x0680,0x0800,0x0680,0x0800,
0x0580,0x0700,0x0580,0x0700,0x0700,0x0900,0x0700,0x0900,0x0580,0x0700,0x0580,0x0700,0x0700,0x0900,0x0700,0x0900,
0x0680,0x0800,0x0680,0x0800,0x0800,0x0a00,0x0800,0x0a00,0x0680,0x0800,0x0680,0x0800,0x0800,0x0a00,0x0800,0x0a00,
0x0700,0x0900,0x0700,0x0900,0x0900,0x0b80,0x0900,0x0b80,0x0700,0x0900,0x0700,0x0900,0x0900,0x0b80,0x0900,0x0b80,
0x0800,0x0a00,0x0800,0x0a00,0x0a00,0x0c80,0x0a00,0x0c80,0x0800,0x0a00,0x0800,0x0a00,0x0a00,0x0c80,0x0a00,0x0c80,
0x0900,0x0b80,0x0900,0x0b80,0x0b80,0x0e80,0x0b80,0x0e80,0x0900,0x0b80,0x0900,0x0b80,0x0b80,0x0e80,0x0b80,0x0e80,
0x0a00,0x0d00,0x0a00,0x0d00,0x0d00,0x1000,0x0d00,0x1000,0x0a00,0x0d00,0x0a00,0x0d00,0x0d00,0x1000,0x0d00,0x1000,
0x0b00,0x0e00,0x0b00,0x0e00,0x0e00,0x1200,0x0e00,0x1200,0x0b00,0x0e00,0x0b00,0x0e00,0x0e00,0x1200,0x0e00,0x1200,
0x0d00,0x1000,0x0d00,0x1000,0x1000,0x1400,0x1000,0x1400,0x0d00,0x1000,0x0d00,0x1000,0x1000,0x1400,0x1000,0x1400,
0x0e00,0x1200,0x0e00,0x1200,0x1200,0x1700,0x1200,0x1700,0x0e00,0x1200,0x0e00,0x1200,0x1200,0x1700,0x1200,0x1700
};


signed char h264Tab4x4offset[32] = { 
    4,  0,  -4,  4,     
    4,  0,   4, -4,
    4,  0,  -4,  4,
    4,  0, -12,  4,
    4,  0,  -4,  4,
    4,  0,   4, -4, 
    4,  0,  -4,  4,
    4,  0, -12,  4    
};

bool bUseArmCode = false;

#ifdef H264_C_CODE

void c_H264_Add_4x4(u8* pPel, u32 nStep, int iVal)
{
    int iAdd = (iVal + 32) >> 6;
    if (iAdd == 0)
        return;

    nStep -= 4;
    for (uint j=0;j<4;j++) {
        for (uint i=0;i<4;i++) {
            int c = *pPel;
            c += iAdd;
            if (c > 255)
                c = 255;
            else if (c<0)
                c = 0;
            *pPel ++ = c;
        }
        pPel += nStep;
    }     
}

void c_H264_Trans4x4(
    Ipp8u*          pYPlane,
    Ipp16s*         pCoeff,
    const Ipp16s*   pQuantTable,                                   
    const Ipp16s*   pGlobalCoeff,
    uint            nYStep,          
    uint            qAdd,            
    uint            qShiftRight,     
    uint            qShiftLeft)
{
    int     i;
    int     mat[16], mat2[19];
    
    for (i=0;i<16;i++) 
        mat[i] = ((int(pCoeff[i])* int(pQuantTable[i]) + int(qAdd))>>qShiftRight) << qShiftLeft;

    if (pGlobalCoeff != NULL) 
        mat[0] = *pGlobalCoeff;
    
    int* mIn  = mat;
    int* mOut = mat2;
    
    for (i=0;i<4;i++, mIn+=4, mOut ++)
    {
        Ipp32s v0 = mIn[0] + mIn[2];      
        Ipp32s v1 = mIn[0] - mIn[2];   
        Ipp32s v2 = (mIn[1] >> 1) - mIn[3];
        Ipp32s v3 = mIn[1] + (mIn[3] >> 1);
        
        mOut[0]  = (v0 + v3);
        mOut[4]  = (v1 + v2);
        mOut[8]  = (v1 - v2);
        mOut[12] = (v0 - v3);
    }
    
    mIn  = mat2;
    Ipp16s* p = pCoeff;
    
    for (i=0;i<4;i++,mIn+=4, p++)
    {
        Ipp32s v0 = mIn[0] + mIn[2];
        Ipp32s v1 = mIn[0] - mIn[2];
        Ipp32s v2 = (mIn[1] >> 1) - mIn[3];
        Ipp32s v3 = mIn[1] + (mIn[3] >> 1);
        
        p[0]  = Ipp16s((v0 + v3 + 0x20)>>6);
        p[4]  = Ipp16s((v1 + v2 + 0x20)>>6);
        p[8]  = Ipp16s((v1 - v2 + 0x20)>>6);
        p[12] = Ipp16s((v0 - v3 + 0x20)>>6);
    }                
    
    u8* pPel = pYPlane;
    p = pCoeff;
    
    uint nStep = nYStep - 4;
    
    for (uint j=0;j<4;j++) {
        for (uint i=0;i<4;i++) {
            int c = *pPel;
            c += p[0]; p++;
            if (c > 255)
                c = 255;
            else if (c<0)
                c = 0;
            *pPel ++ = c;
        }
        pPel += nStep;
    }
}

void c_H264_Trans4x4(const Ipp16s* pCoeff, const Ipp16s* pQuantTable, Ipp8u* pYPlane, uint nStep, const Ipp16s* pGCoeff)
{
    int     i;
    int     mat[16], mat2[19];
  
    for (i=0;i<16;i++) 
        mat[i] = int(pCoeff[i])* int(pQuantTable[i]);

    if (pGCoeff != NULL) 
        mat[0] = *pGCoeff;
    
    int* mIn  = mat;
    int* mOut = mat2;
    
    for (i=0;i<4;i++, mIn+=4, mOut ++)
    {
        Ipp32s v0 = mIn[0] + mIn[2];      
        Ipp32s v1 = mIn[0] - mIn[2];   
        Ipp32s v2 = (mIn[1] >> 1) - mIn[3];
        Ipp32s v3 = mIn[1] + (mIn[3] >> 1);
        
        mOut[0]  = (v0 + v3);
        mOut[4]  = (v1 + v2);
        mOut[8]  = (v1 - v2);
        mOut[12] = (v0 - v3);
    }
    
    mIn  = mat2;
    int* p = mat;
    
    for (i=0;i<4;i++,mIn+=4, p++)
    {
        Ipp32s v0 = mIn[0] + mIn[2];
        Ipp32s v1 = mIn[0] - mIn[2];
        Ipp32s v2 = (mIn[1] >> 1) - mIn[3];
        Ipp32s v3 = mIn[1] + (mIn[3] >> 1);
        
        p[0]  = Ipp16s((v0 + v3 + 0x20)>>6);
        p[4]  = Ipp16s((v1 + v2 + 0x20)>>6);
        p[8]  = Ipp16s((v1 - v2 + 0x20)>>6);
        p[12] = Ipp16s((v0 - v3 + 0x20)>>6);
    }                
    
    u8* pPel = pYPlane;
    p = mat;
    
    uint nYStep = nStep - 4;
    
    for (uint j=0;j<4;j++) {
        for (uint i=0;i<4;i++) {
            int c = *pPel;
            c += p[0]; p++;
            if (c > 255)
                c = 255;
            else if (c<0)
                c = 0;
            *pPel ++ = c;
        }
        pPel += nYStep;
    }
}
#endif //H264_C_CODE
